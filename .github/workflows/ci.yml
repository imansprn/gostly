name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  # Test and Lint
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Go dependencies
        run: go mod download

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend for tests
        run: |
          cd frontend
          npm run build
          # Ensure dist directory exists
          ls -la dist/

      - name: Run Go tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
          go vet ./...

      # Frontend tests and linting removed - no test scripts configured

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella

  # Build for multiple platforms
  build:
    name: Build
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails CLI
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build application
        run: |
          wails build -platform ${{ matrix.os }}/${{ matrix.arch }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gostly-${{ matrix.os }}-${{ matrix.arch }}
          path: build/bin/

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Go security scan
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate

  # Release workflow
  release:
    name: Release
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create release assets
        run: |
          mkdir -p release-assets
          for artifact in artifacts/*/; do
            if [ -d "$artifact" ]; then
              artifact_name=$(basename "$artifact")
              cd "$artifact"
              find . -type f -executable -exec tar -czf "../../release-assets/${artifact_name}.tar.gz" {} \;
              cd ../..
            fi
          done

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-assets/
          asset_name: gostly-assets
          asset_content_type: application/octet-stream
