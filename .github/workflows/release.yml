name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.23'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin/amd64
            artifact_name: gostly-macos-amd64
            file_extension: .dmg
          - os: macos-latest
            platform: darwin/arm64
            artifact_name: gostly-macos-arm64
            file_extension: .dmg
          - os: windows-latest
            platform: windows/amd64
            artifact_name: gostly-windows-amd64
            file_extension: .exe
          - os: windows-latest
            platform: windows/amd64
            artifact_name: gostly-windows-installer
            file_extension: .exe
            build_type: installer

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Node.js (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Node.js (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Build application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          wails build -platform ${{ matrix.platform }} -clean -ldflags "-s -w"

      - name: Build application (Windows)
        if: matrix.os == 'windows-latest' && matrix.build_type != 'installer'
        run: |
          wails build -platform ${{ matrix.platform }} -clean -ldflags "-s -w"

      - name: Build Windows installer
        if: matrix.os == 'windows-latest' && matrix.build_type == 'installer'
        run: |
          wails build -platform ${{ matrix.platform }} -clean -ldflags "-s -w" -nsis

      - name: Create DMG (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Create DMG using create-dmg
          brew install create-dmg
          mkdir -p dmg
          cp -r build/bin/gostly.app dmg/
          create-dmg \
            --volname "Gostly" \
            --volicon "appicon.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "gostly.app" 175 120 \
            --hide-extension "gostly.app" \
            --app-drop-link 425 120 \
            "gostly-${{ matrix.platform }}${{ matrix.file_extension }}" \
            "dmg/"

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            gostly-*.dmg
            build/bin/gostly.app
          retention-days: 30

      - name: Upload Windows executable
        if: matrix.os == 'windows-latest' && matrix.build_type != 'installer'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            build/bin/gostly.exe
          retention-days: 30

      - name: Upload Windows installer
        if: matrix.os == 'windows-latest' && matrix.build_type == 'installer'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            build/bin/gostly-installer.exe
          retention-days: 30

  create-release:
    name: Create Release
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: ${{ contains(steps.get_tag.outputs.tag, 'beta') || contains(steps.get_tag.outputs.tag, 'alpha') || contains(steps.get_tag.outputs.tag, 'rc') }}
          generate_release_notes: true
          files: |
            artifacts/gostly-macos-amd64/gostly-*.dmg
            artifacts/gostly-macos-arm64/gostly-*.dmg
            artifacts/gostly-windows-amd64/gostly.exe
            artifacts/gostly-windows-installer/gostly-installer.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload DMG files
        run: |
          # Upload macOS DMG files
          for dmg in artifacts/gostly-macos-*/gostly-*.dmg; do
            if [ -f "$dmg" ]; then
              echo "Uploading $dmg"
              gh release upload ${{ steps.get_tag.outputs.tag }} "$dmg" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows files
        run: |
          # Upload Windows executable
          if [ -f "artifacts/gostly-windows-amd64/gostly.exe" ]; then
            gh release upload ${{ steps.get_tag.outputs.tag }} "artifacts/gostly-windows-amd64/gostly.exe" --clobber
          fi
          
          # Upload Windows installer
          if [ -f "artifacts/gostly-windows-installer/gostly-installer.exe" ]; then
            gh release upload ${{ steps.get_tag.outputs.tag }} "artifacts/gostly-windows-installer/gostly-installer.exe" --clobber
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
